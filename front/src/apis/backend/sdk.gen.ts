// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { ReadRootGetData, UploadFileUploadPostData, UploadFileUploadPostResponse, UploadFileUploadPostError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Upload File
 * Upload a file to IPFS via Pinata
 */
export const uploadFileUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadFileUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadFileUploadPostResponse, UploadFileUploadPostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};